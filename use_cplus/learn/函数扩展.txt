-----------------------------------------------------------------
------------------------- 函数的默认参数 -------------------------
-----------------------------------------------------------------
// 注意：
// 如果函数传入了自己的数据，就用自己的数据，如果没有，那么用默认值
// 如果某个位置已经有了默认参数，那么从这个位置往后，从左到右都必须有默认参数
// 如果函数声明有默认参数，函数实现就不能有默认参数

int func(int a, int b, int c=10);

void main() {
    /* code */
}

int func(int a, int b, int c) {
    // 这里的c就不能写默认参数，因为上面声明写了默认参数
    // 声明和实现只能有一个有默认参数
    /* code */
}

-----------------------------------------------------------------
------------------------- 函数的占位参数 -------------------------
-----------------------------------------------------------------
// 占位参数也可以有默认参数

int func(int a, int=10) {
    /* code */
}

void main() {
    /* code */
    int a=10,b=20;
    func(a, b);
}

-----------------------------------------------------------------
---------------------------- 函数重载 ----------------------------
-----------------------------------------------------------------
作用：函数名可以相同，提高复用性
重载满足条件：
》同一个作用域下
》函数名称相同
》函数参数类型不同，或者个数不同或者顺序不同
注意：函数的返回值不可以作为函数重载的条件

int func() {
    /* code */
}
int func(int a) {
    /* code */
}
int func(double a) {
    /* code */
}
int func(double a, int b) {
    /* code */
}
int func(int a, double b) {
    /* code */
}

void main() {
    func();         // int func()
    func(3);        // int func(int a)
    func(3.14);     // int func(double a)
    func(3.14, 3);  // int func(double a, int b)
    func(3, 3.14);  // int func(int a, double b)
}

---------- 引用作为重载的条件 ----------

int func(int &a) {
    /* code */
}
int func(const int &a) {
    /* code */
}

void main() {
    int a = 10;
    func(a); // 优先调用可读可写的函数 -> int func(int &a)
    func(10); // 传一个常量 -> int func(const int &a)
}

---------- 函数重载碰到默认参数 ----------

int func(int a) {
    /* code */
}
int func(int a, int b=10) {
    /* code */
}

void main() {
    int a = 10;
    func(a); // × 出现二义性会报错，尽量避免这种情况
    func(a, 20) // int func(int a, int b=10)
}

